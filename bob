#!/bin/bash

. $(which bashkit)

tab-add-1 () {
	:
}

tab-add-2 () {
	USERNAME=${COMP_CUR/@*/}
	for host in $(cat ~/.ssh/known_hosts | sed 's/[, ].*//'); do
		if [ "$USERNAME" != "$COMP_CUR" ]; then
			echo $USERNAME@$host
		else
			echo $host
		fi
	done
}

opt add --force,-f --scripts,-s
cmd-add () {
	silent git status || error Not a git repository
	NAME=$1
	REMOTE=$2

	([ "$NAME" = "" ] || [ "$REMOTE" = "" ]) && error Usage bob add [name] [remote]

	REPO_NAME=$NAME.git
	chmod +x $DIRNAME/scripts/*

	if ! opt --force && ssh $REMOTE "[ -d $REPO_NAME ]"; then
		silent git remote rm $NAME
		git remote add $NAME $REMOTE:$REPO_NAME
		echo Added git remote $NAME -\> $REMOTE:$REPO_NAME
		return $?
	fi

	(
		echo "rm -rf $REPO_NAME"
		echo "mkdir -p $REPO_NAME"
		echo "mkdir -p $REPO_NAME/bob"
		echo "cd $REPO_NAME"
		echo "git init --bare > /dev/null"
	) | ssh $REMOTE bash || exit 1

	if opt --scripts; then
		TMP_DIR=/tmp/bob-$RANDOM
		mkdir -p $TMP_DIR
		cd $TMP_DIR
		cp $DIRNAME/post-receive .
		cp -r $opt_scripts scripts
		tar cz scripts post-receive | ssh $REMOTE "cd $REPO_NAME/bob && tar xz"
		rm -rf $TMP_DIR
	else
		cd $DIRNAME
		tar cz scripts post-receive | ssh $REMOTE "cd $REPO_NAME/bob && tar xz"
	fi

	(
		echo "cd $REPO_NAME"
		echo "mv bob/post-receive hooks/post-receive"
		echo "chmod +x hooks/post-receive"
	) | ssh $REMOTE bash || exit 1

	cd $CWD
	silent git remote rm $NAME
	git remote add $NAME $REMOTE:$REPO_NAME
	echo Added git remote $NAME -\> $REMOTE:$REPO_NAME
}

set-remote () {
	silent git status || error Not a git repository
	[ "$1" = "" ] && error Not a valid remote
	REMOTE=$(git remote -v | grep ^$1 | awk '{print $2}' | sed 's/:.*//' | head -n 1)
	[ "$REMOTE" = "" ] && error Not a valid remote
	NAME=$1
	REPO_NAME=$1.git
}

tab-2 () {
	silent git status || exit 0
	git remote -v | awk '{print $1}' | grep -v origin
}

tab-push-2 () {
	git branch | sed 's/\* //'
}

cmd-push () {
	set-remote $1 # just for sanity checks
	git push $@
}

cmd-remove () {
	set-remote $1

	(
		echo "[ ! -d $REPO_NAME/bob/release ] && echo No release found && exit 1"
		echo "cd $REPO_NAME/bob/release"
		echo "[ -f ../scripts/remove ] && ../scripts/remove || exit 1"
		echo "cd"
		echo "rm -rf $REPO_NAME"
	) | ssh $REMOTE bash || exit 1

	git remote rm $NAME
}

tab-fetch-2 () {
	ls $DIRNAME/scripts
}

opt fetch --gzip,-g --dir,-d
cmd-fetch () {
	set-remote $1
	TAR_OPTS="c"
	BOB_SCRIPTS=$REPO_NAME/bob/scripts
	opt --gzip && TAR_OPTS="cz"

	if [ "$2" = "" ]; then
		if opt --dir; then
			mkdir -p $opt_dir
			cd $opt_dir
			ssh $REMOTE "[ -d $BOB_SCRIPTS ] && cd $BOB_SCRIPTS && tar cz ." | tar xz
		else
			ssh $REMOTE "[ -d $BOB_SCRIPTS ] && cd $BOB_SCRIPTS && tar $TAR_OPTS ." || error Could not tarball scripts
		fi
	else
		ssh $REMOTE "[ -f $BOB_SCRIPTS/$2 ] && cat $BOB_SCRIPTS/$2" || error Not a valid script
	fi
}

tab-edit-2 () {
	ls $DIRNAME/scripts
}

cmd-edit () {
	set-remote $1
	SCRIPT=$REPO_NAME/bob/scripts/$2
	TMP_FILE=/tmp/$NAME.$2

	silent scp $REMOTE:$SCRIPT $TMP_FILE || exit 1
	${EDITOR:-vim} $TMP_FILE
	silent scp $TMP_FILE $REMOTE:$SCRIPT || exit 1
	rm -f $TMP_FILE
}

cmd-redeploy () {
	set-remote $1
	ssh $REMOTE "cd $REPO_NAME && hooks/post-receive"
}

cmd-restart () {
	set-remote $1
	(
		echo "[ ! -d $REPO_NAME/bob/release ] && echo No release found && exit 1"
		echo "cd $REPO_NAME/bob/release"
		echo "[ -f ../scripts/restart ] && ../scripts/restart"
	) | ssh $REMOTE bash
}

cmd-update () {
	cd $DIRNAME
	git pull
}

print-help () {
	cat $DIRNAME/help
}

cmd () {
	print-help
	exit 1
}

run
